// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: request_response.proto

package farcaster

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StoreType int32

const (
	StoreType_STORE_TYPE_NONE            StoreType = 0
	StoreType_STORE_TYPE_CASTS           StoreType = 1
	StoreType_STORE_TYPE_LINKS           StoreType = 2
	StoreType_STORE_TYPE_REACTIONS       StoreType = 3
	StoreType_STORE_TYPE_USER_DATA       StoreType = 4
	StoreType_STORE_TYPE_VERIFICATIONS   StoreType = 5
	StoreType_STORE_TYPE_USERNAME_PROOFS StoreType = 6
)

// Enum value maps for StoreType.
var (
	StoreType_name = map[int32]string{
		0: "STORE_TYPE_NONE",
		1: "STORE_TYPE_CASTS",
		2: "STORE_TYPE_LINKS",
		3: "STORE_TYPE_REACTIONS",
		4: "STORE_TYPE_USER_DATA",
		5: "STORE_TYPE_VERIFICATIONS",
		6: "STORE_TYPE_USERNAME_PROOFS",
	}
	StoreType_value = map[string]int32{
		"STORE_TYPE_NONE":            0,
		"STORE_TYPE_CASTS":           1,
		"STORE_TYPE_LINKS":           2,
		"STORE_TYPE_REACTIONS":       3,
		"STORE_TYPE_USER_DATA":       4,
		"STORE_TYPE_VERIFICATIONS":   5,
		"STORE_TYPE_USERNAME_PROOFS": 6,
	}
)

func (x StoreType) Enum() *StoreType {
	p := new(StoreType)
	*p = x
	return p
}

func (x StoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_response_proto_enumTypes[0].Descriptor()
}

func (StoreType) Type() protoreflect.EnumType {
	return &file_request_response_proto_enumTypes[0]
}

func (x StoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreType.Descriptor instead.
func (StoreType) EnumDescriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{0}
}

type StorageUnitType int32

const (
	StorageUnitType_UNIT_TYPE_LEGACY StorageUnitType = 0
	StorageUnitType_UNIT_TYPE_2024   StorageUnitType = 1
)

// Enum value maps for StorageUnitType.
var (
	StorageUnitType_name = map[int32]string{
		0: "UNIT_TYPE_LEGACY",
		1: "UNIT_TYPE_2024",
	}
	StorageUnitType_value = map[string]int32{
		"UNIT_TYPE_LEGACY": 0,
		"UNIT_TYPE_2024":   1,
	}
)

func (x StorageUnitType) Enum() *StorageUnitType {
	p := new(StorageUnitType)
	*p = x
	return p
}

func (x StorageUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_response_proto_enumTypes[1].Descriptor()
}

func (StorageUnitType) Type() protoreflect.EnumType {
	return &file_request_response_proto_enumTypes[1]
}

func (x StorageUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageUnitType.Descriptor instead.
func (StorageUnitType) EnumDescriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{1}
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_request_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{0}
}

type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventTypes    []HubEventType         `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=HubEventType" json:"event_types,omitempty"`
	FromId        *uint64                `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3,oneof" json:"from_id,omitempty"`
	TotalShards   *uint64                `protobuf:"varint,3,opt,name=total_shards,json=totalShards,proto3,oneof" json:"total_shards,omitempty"`
	ShardIndex    *uint64                `protobuf:"varint,4,opt,name=shard_index,json=shardIndex,proto3,oneof" json:"shard_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_request_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeRequest) GetEventTypes() []HubEventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *SubscribeRequest) GetFromId() uint64 {
	if x != nil && x.FromId != nil {
		return *x.FromId
	}
	return 0
}

func (x *SubscribeRequest) GetTotalShards() uint64 {
	if x != nil && x.TotalShards != nil {
		return *x.TotalShards
	}
	return 0
}

func (x *SubscribeRequest) GetShardIndex() uint64 {
	if x != nil && x.ShardIndex != nil {
		return *x.ShardIndex
	}
	return 0
}

type EventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	mi := &file_request_response_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{2}
}

func (x *EventRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HubInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbStats       bool                   `protobuf:"varint,1,opt,name=db_stats,json=dbStats,proto3" json:"db_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HubInfoRequest) Reset() {
	*x = HubInfoRequest{}
	mi := &file_request_response_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HubInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubInfoRequest) ProtoMessage() {}

func (x *HubInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubInfoRequest.ProtoReflect.Descriptor instead.
func (*HubInfoRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{3}
}

func (x *HubInfoRequest) GetDbStats() bool {
	if x != nil {
		return x.DbStats
	}
	return false
}

// Response Types for the Sync RPC Methods
type HubInfoResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Version        string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	IsSyncing      bool                   `protobuf:"varint,2,opt,name=is_syncing,json=isSyncing,proto3" json:"is_syncing,omitempty"`
	Nickname       string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RootHash       string                 `protobuf:"bytes,4,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	DbStats        *DbStats               `protobuf:"bytes,5,opt,name=db_stats,json=dbStats,proto3" json:"db_stats,omitempty"`
	PeerId         string                 `protobuf:"bytes,6,opt,name=peerId,proto3" json:"peerId,omitempty"`
	HubOperatorFid uint64                 `protobuf:"varint,7,opt,name=hub_operator_fid,json=hubOperatorFid,proto3" json:"hub_operator_fid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HubInfoResponse) Reset() {
	*x = HubInfoResponse{}
	mi := &file_request_response_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HubInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubInfoResponse) ProtoMessage() {}

func (x *HubInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubInfoResponse.ProtoReflect.Descriptor instead.
func (*HubInfoResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{4}
}

func (x *HubInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HubInfoResponse) GetIsSyncing() bool {
	if x != nil {
		return x.IsSyncing
	}
	return false
}

func (x *HubInfoResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *HubInfoResponse) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *HubInfoResponse) GetDbStats() *DbStats {
	if x != nil {
		return x.DbStats
	}
	return nil
}

func (x *HubInfoResponse) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *HubInfoResponse) GetHubOperatorFid() uint64 {
	if x != nil {
		return x.HubOperatorFid
	}
	return 0
}

type DbStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NumMessages    uint64                 `protobuf:"varint,1,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
	NumFidEvents   uint64                 `protobuf:"varint,2,opt,name=num_fid_events,json=numFidEvents,proto3" json:"num_fid_events,omitempty"`
	NumFnameEvents uint64                 `protobuf:"varint,3,opt,name=num_fname_events,json=numFnameEvents,proto3" json:"num_fname_events,omitempty"`
	ApproxSize     uint64                 `protobuf:"varint,4,opt,name=approx_size,json=approxSize,proto3" json:"approx_size,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DbStats) Reset() {
	*x = DbStats{}
	mi := &file_request_response_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbStats) ProtoMessage() {}

func (x *DbStats) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbStats.ProtoReflect.Descriptor instead.
func (*DbStats) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{5}
}

func (x *DbStats) GetNumMessages() uint64 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

func (x *DbStats) GetNumFidEvents() uint64 {
	if x != nil {
		return x.NumFidEvents
	}
	return 0
}

func (x *DbStats) GetNumFnameEvents() uint64 {
	if x != nil {
		return x.NumFnameEvents
	}
	return 0
}

func (x *DbStats) GetApproxSize() uint64 {
	if x != nil {
		return x.ApproxSize
	}
	return 0
}

type SyncStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerId        *string                `protobuf:"bytes,1,opt,name=peerId,proto3,oneof" json:"peerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncStatusRequest) Reset() {
	*x = SyncStatusRequest{}
	mi := &file_request_response_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusRequest) ProtoMessage() {}

func (x *SyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusRequest.ProtoReflect.Descriptor instead.
func (*SyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{6}
}

func (x *SyncStatusRequest) GetPeerId() string {
	if x != nil && x.PeerId != nil {
		return *x.PeerId
	}
	return ""
}

type SyncStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSyncing     bool                   `protobuf:"varint,1,opt,name=is_syncing,json=isSyncing,proto3" json:"is_syncing,omitempty"`
	SyncStatus    []*SyncStatus          `protobuf:"bytes,2,rep,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
	EngineStarted bool                   `protobuf:"varint,3,opt,name=engine_started,json=engineStarted,proto3" json:"engine_started,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncStatusResponse) Reset() {
	*x = SyncStatusResponse{}
	mi := &file_request_response_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusResponse) ProtoMessage() {}

func (x *SyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusResponse.ProtoReflect.Descriptor instead.
func (*SyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{7}
}

func (x *SyncStatusResponse) GetIsSyncing() bool {
	if x != nil {
		return x.IsSyncing
	}
	return false
}

func (x *SyncStatusResponse) GetSyncStatus() []*SyncStatus {
	if x != nil {
		return x.SyncStatus
	}
	return nil
}

func (x *SyncStatusResponse) GetEngineStarted() bool {
	if x != nil {
		return x.EngineStarted
	}
	return false
}

type SyncStatus struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PeerId               string                 `protobuf:"bytes,1,opt,name=peerId,proto3" json:"peerId,omitempty"`
	InSync               string                 `protobuf:"bytes,2,opt,name=inSync,proto3" json:"inSync,omitempty"`
	ShouldSync           bool                   `protobuf:"varint,3,opt,name=shouldSync,proto3" json:"shouldSync,omitempty"`
	DivergencePrefix     string                 `protobuf:"bytes,4,opt,name=divergencePrefix,proto3" json:"divergencePrefix,omitempty"`
	DivergenceSecondsAgo int32                  `protobuf:"varint,5,opt,name=divergenceSecondsAgo,proto3" json:"divergenceSecondsAgo,omitempty"`
	TheirMessages        uint64                 `protobuf:"varint,6,opt,name=theirMessages,proto3" json:"theirMessages,omitempty"`
	OurMessages          uint64                 `protobuf:"varint,7,opt,name=ourMessages,proto3" json:"ourMessages,omitempty"`
	LastBadSync          int64                  `protobuf:"varint,8,opt,name=lastBadSync,proto3" json:"lastBadSync,omitempty"`
	Score                int64                  `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SyncStatus) Reset() {
	*x = SyncStatus{}
	mi := &file_request_response_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatus) ProtoMessage() {}

func (x *SyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatus.ProtoReflect.Descriptor instead.
func (*SyncStatus) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{8}
}

func (x *SyncStatus) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *SyncStatus) GetInSync() string {
	if x != nil {
		return x.InSync
	}
	return ""
}

func (x *SyncStatus) GetShouldSync() bool {
	if x != nil {
		return x.ShouldSync
	}
	return false
}

func (x *SyncStatus) GetDivergencePrefix() string {
	if x != nil {
		return x.DivergencePrefix
	}
	return ""
}

func (x *SyncStatus) GetDivergenceSecondsAgo() int32 {
	if x != nil {
		return x.DivergenceSecondsAgo
	}
	return 0
}

func (x *SyncStatus) GetTheirMessages() uint64 {
	if x != nil {
		return x.TheirMessages
	}
	return 0
}

func (x *SyncStatus) GetOurMessages() uint64 {
	if x != nil {
		return x.OurMessages
	}
	return 0
}

func (x *SyncStatus) GetLastBadSync() int64 {
	if x != nil {
		return x.LastBadSync
	}
	return 0
}

func (x *SyncStatus) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TrieNodeMetadataResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Prefix        []byte                      `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	NumMessages   uint64                      `protobuf:"varint,2,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
	Hash          string                      `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Children      []*TrieNodeMetadataResponse `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrieNodeMetadataResponse) Reset() {
	*x = TrieNodeMetadataResponse{}
	mi := &file_request_response_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrieNodeMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrieNodeMetadataResponse) ProtoMessage() {}

func (x *TrieNodeMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrieNodeMetadataResponse.ProtoReflect.Descriptor instead.
func (*TrieNodeMetadataResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{9}
}

func (x *TrieNodeMetadataResponse) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *TrieNodeMetadataResponse) GetNumMessages() uint64 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

func (x *TrieNodeMetadataResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TrieNodeMetadataResponse) GetChildren() []*TrieNodeMetadataResponse {
	if x != nil {
		return x.Children
	}
	return nil
}

type TrieNodeSnapshotResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Prefix         []byte                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ExcludedHashes []string               `protobuf:"bytes,2,rep,name=excluded_hashes,json=excludedHashes,proto3" json:"excluded_hashes,omitempty"`
	NumMessages    uint64                 `protobuf:"varint,3,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
	RootHash       string                 `protobuf:"bytes,4,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrieNodeSnapshotResponse) Reset() {
	*x = TrieNodeSnapshotResponse{}
	mi := &file_request_response_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrieNodeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrieNodeSnapshotResponse) ProtoMessage() {}

func (x *TrieNodeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrieNodeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*TrieNodeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{10}
}

func (x *TrieNodeSnapshotResponse) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *TrieNodeSnapshotResponse) GetExcludedHashes() []string {
	if x != nil {
		return x.ExcludedHashes
	}
	return nil
}

func (x *TrieNodeSnapshotResponse) GetNumMessages() uint64 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

func (x *TrieNodeSnapshotResponse) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

type TrieNodePrefix struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        []byte                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrieNodePrefix) Reset() {
	*x = TrieNodePrefix{}
	mi := &file_request_response_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrieNodePrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrieNodePrefix) ProtoMessage() {}

func (x *TrieNodePrefix) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrieNodePrefix.ProtoReflect.Descriptor instead.
func (*TrieNodePrefix) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{11}
}

func (x *TrieNodePrefix) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type SyncIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncIds       [][]byte               `protobuf:"bytes,1,rep,name=sync_ids,json=syncIds,proto3" json:"sync_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncIds) Reset() {
	*x = SyncIds{}
	mi := &file_request_response_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncIds) ProtoMessage() {}

func (x *SyncIds) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncIds.ProtoReflect.Descriptor instead.
func (*SyncIds) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{12}
}

func (x *SyncIds) GetSyncIds() [][]byte {
	if x != nil {
		return x.SyncIds
	}
	return nil
}

type FidRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	PageSize      *uint32                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                  `protobuf:"varint,4,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FidRequest) Reset() {
	*x = FidRequest{}
	mi := &file_request_response_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FidRequest) ProtoMessage() {}

func (x *FidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FidRequest.ProtoReflect.Descriptor instead.
func (*FidRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{13}
}

func (x *FidRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *FidRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FidRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *FidRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type FidTimestampRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Fid            uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	PageSize       *uint32                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken      []byte                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse        *bool                  `protobuf:"varint,4,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	StartTimestamp *uint64                `protobuf:"varint,5,opt,name=start_timestamp,json=startTimestamp,proto3,oneof" json:"start_timestamp,omitempty"`
	StopTimestamp  *uint64                `protobuf:"varint,6,opt,name=stop_timestamp,json=stopTimestamp,proto3,oneof" json:"stop_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FidTimestampRequest) Reset() {
	*x = FidTimestampRequest{}
	mi := &file_request_response_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FidTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FidTimestampRequest) ProtoMessage() {}

func (x *FidTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FidTimestampRequest.ProtoReflect.Descriptor instead.
func (*FidTimestampRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{14}
}

func (x *FidTimestampRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *FidTimestampRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FidTimestampRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *FidTimestampRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

func (x *FidTimestampRequest) GetStartTimestamp() uint64 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *FidTimestampRequest) GetStopTimestamp() uint64 {
	if x != nil && x.StopTimestamp != nil {
		return *x.StopTimestamp
	}
	return 0
}

type FidsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      *uint32                `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                  `protobuf:"varint,3,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FidsRequest) Reset() {
	*x = FidsRequest{}
	mi := &file_request_response_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FidsRequest) ProtoMessage() {}

func (x *FidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FidsRequest.ProtoReflect.Descriptor instead.
func (*FidsRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{15}
}

func (x *FidsRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FidsRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *FidsRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type FidsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fids          []uint64               `protobuf:"varint,1,rep,packed,name=fids,proto3" json:"fids,omitempty"`
	NextPageToken []byte                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FidsResponse) Reset() {
	*x = FidsResponse{}
	mi := &file_request_response_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FidsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FidsResponse) ProtoMessage() {}

func (x *FidsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FidsResponse.ProtoReflect.Descriptor instead.
func (*FidsResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{16}
}

func (x *FidsResponse) GetFids() []uint64 {
	if x != nil {
		return x.Fids
	}
	return nil
}

func (x *FidsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type MessagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*Message             `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	NextPageToken []byte                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessagesResponse) Reset() {
	*x = MessagesResponse{}
	mi := &file_request_response_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesResponse) ProtoMessage() {}

func (x *MessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesResponse.ProtoReflect.Descriptor instead.
func (*MessagesResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{17}
}

func (x *MessagesResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagesResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type CastsByParentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Parent:
	//
	//	*CastsByParentRequest_ParentCastId
	//	*CastsByParentRequest_ParentUrl
	Parent        isCastsByParentRequest_Parent `protobuf_oneof:"parent"`
	PageSize      *uint32                       `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                        `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                         `protobuf:"varint,4,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CastsByParentRequest) Reset() {
	*x = CastsByParentRequest{}
	mi := &file_request_response_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastsByParentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastsByParentRequest) ProtoMessage() {}

func (x *CastsByParentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastsByParentRequest.ProtoReflect.Descriptor instead.
func (*CastsByParentRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{18}
}

func (x *CastsByParentRequest) GetParent() isCastsByParentRequest_Parent {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *CastsByParentRequest) GetParentCastId() *CastId {
	if x != nil {
		if x, ok := x.Parent.(*CastsByParentRequest_ParentCastId); ok {
			return x.ParentCastId
		}
	}
	return nil
}

func (x *CastsByParentRequest) GetParentUrl() string {
	if x != nil {
		if x, ok := x.Parent.(*CastsByParentRequest_ParentUrl); ok {
			return x.ParentUrl
		}
	}
	return ""
}

func (x *CastsByParentRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *CastsByParentRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *CastsByParentRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type isCastsByParentRequest_Parent interface {
	isCastsByParentRequest_Parent()
}

type CastsByParentRequest_ParentCastId struct {
	ParentCastId *CastId `protobuf:"bytes,1,opt,name=parent_cast_id,json=parentCastId,proto3,oneof"`
}

type CastsByParentRequest_ParentUrl struct {
	ParentUrl string `protobuf:"bytes,5,opt,name=parent_url,json=parentUrl,proto3,oneof"`
}

func (*CastsByParentRequest_ParentCastId) isCastsByParentRequest_Parent() {}

func (*CastsByParentRequest_ParentUrl) isCastsByParentRequest_Parent() {}

type ReactionRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Fid          uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	ReactionType ReactionType           `protobuf:"varint,2,opt,name=reaction_type,json=reactionType,proto3,enum=ReactionType" json:"reaction_type,omitempty"`
	// Types that are valid to be assigned to Target:
	//
	//	*ReactionRequest_TargetCastId
	//	*ReactionRequest_TargetUrl
	Target        isReactionRequest_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReactionRequest) Reset() {
	*x = ReactionRequest{}
	mi := &file_request_response_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionRequest) ProtoMessage() {}

func (x *ReactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionRequest.ProtoReflect.Descriptor instead.
func (*ReactionRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{19}
}

func (x *ReactionRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *ReactionRequest) GetReactionType() ReactionType {
	if x != nil {
		return x.ReactionType
	}
	return ReactionType_REACTION_TYPE_NONE
}

func (x *ReactionRequest) GetTarget() isReactionRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReactionRequest) GetTargetCastId() *CastId {
	if x != nil {
		if x, ok := x.Target.(*ReactionRequest_TargetCastId); ok {
			return x.TargetCastId
		}
	}
	return nil
}

func (x *ReactionRequest) GetTargetUrl() string {
	if x != nil {
		if x, ok := x.Target.(*ReactionRequest_TargetUrl); ok {
			return x.TargetUrl
		}
	}
	return ""
}

type isReactionRequest_Target interface {
	isReactionRequest_Target()
}

type ReactionRequest_TargetCastId struct {
	TargetCastId *CastId `protobuf:"bytes,3,opt,name=target_cast_id,json=targetCastId,proto3,oneof"`
}

type ReactionRequest_TargetUrl struct {
	TargetUrl string `protobuf:"bytes,4,opt,name=target_url,json=targetUrl,proto3,oneof"`
}

func (*ReactionRequest_TargetCastId) isReactionRequest_Target() {}

func (*ReactionRequest_TargetUrl) isReactionRequest_Target() {}

type ReactionsByFidRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	ReactionType  *ReactionType          `protobuf:"varint,2,opt,name=reaction_type,json=reactionType,proto3,enum=ReactionType,oneof" json:"reaction_type,omitempty"`
	PageSize      *uint32                `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                 `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                  `protobuf:"varint,5,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReactionsByFidRequest) Reset() {
	*x = ReactionsByFidRequest{}
	mi := &file_request_response_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReactionsByFidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsByFidRequest) ProtoMessage() {}

func (x *ReactionsByFidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsByFidRequest.ProtoReflect.Descriptor instead.
func (*ReactionsByFidRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{20}
}

func (x *ReactionsByFidRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *ReactionsByFidRequest) GetReactionType() ReactionType {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return ReactionType_REACTION_TYPE_NONE
}

func (x *ReactionsByFidRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ReactionsByFidRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ReactionsByFidRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type ReactionsByTargetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Target:
	//
	//	*ReactionsByTargetRequest_TargetCastId
	//	*ReactionsByTargetRequest_TargetUrl
	Target        isReactionsByTargetRequest_Target `protobuf_oneof:"target"`
	ReactionType  *ReactionType                     `protobuf:"varint,2,opt,name=reaction_type,json=reactionType,proto3,enum=ReactionType,oneof" json:"reaction_type,omitempty"`
	PageSize      *uint32                           `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                            `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                             `protobuf:"varint,5,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReactionsByTargetRequest) Reset() {
	*x = ReactionsByTargetRequest{}
	mi := &file_request_response_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReactionsByTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsByTargetRequest) ProtoMessage() {}

func (x *ReactionsByTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsByTargetRequest.ProtoReflect.Descriptor instead.
func (*ReactionsByTargetRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{21}
}

func (x *ReactionsByTargetRequest) GetTarget() isReactionsByTargetRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReactionsByTargetRequest) GetTargetCastId() *CastId {
	if x != nil {
		if x, ok := x.Target.(*ReactionsByTargetRequest_TargetCastId); ok {
			return x.TargetCastId
		}
	}
	return nil
}

func (x *ReactionsByTargetRequest) GetTargetUrl() string {
	if x != nil {
		if x, ok := x.Target.(*ReactionsByTargetRequest_TargetUrl); ok {
			return x.TargetUrl
		}
	}
	return ""
}

func (x *ReactionsByTargetRequest) GetReactionType() ReactionType {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return ReactionType_REACTION_TYPE_NONE
}

func (x *ReactionsByTargetRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ReactionsByTargetRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ReactionsByTargetRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type isReactionsByTargetRequest_Target interface {
	isReactionsByTargetRequest_Target()
}

type ReactionsByTargetRequest_TargetCastId struct {
	TargetCastId *CastId `protobuf:"bytes,1,opt,name=target_cast_id,json=targetCastId,proto3,oneof"`
}

type ReactionsByTargetRequest_TargetUrl struct {
	TargetUrl string `protobuf:"bytes,6,opt,name=target_url,json=targetUrl,proto3,oneof"`
}

func (*ReactionsByTargetRequest_TargetCastId) isReactionsByTargetRequest_Target() {}

func (*ReactionsByTargetRequest_TargetUrl) isReactionsByTargetRequest_Target() {}

type UserDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	UserDataType  UserDataType           `protobuf:"varint,2,opt,name=user_data_type,json=userDataType,proto3,enum=UserDataType" json:"user_data_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDataRequest) Reset() {
	*x = UserDataRequest{}
	mi := &file_request_response_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataRequest) ProtoMessage() {}

func (x *UserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataRequest.ProtoReflect.Descriptor instead.
func (*UserDataRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{22}
}

func (x *UserDataRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *UserDataRequest) GetUserDataType() UserDataType {
	if x != nil {
		return x.UserDataType
	}
	return UserDataType_USER_DATA_TYPE_NONE
}

type NameRegistryEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          []byte                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NameRegistryEventRequest) Reset() {
	*x = NameRegistryEventRequest{}
	mi := &file_request_response_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NameRegistryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameRegistryEventRequest) ProtoMessage() {}

func (x *NameRegistryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameRegistryEventRequest.ProtoReflect.Descriptor instead.
func (*NameRegistryEventRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{23}
}

func (x *NameRegistryEventRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type RentRegistryEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RentRegistryEventsRequest) Reset() {
	*x = RentRegistryEventsRequest{}
	mi := &file_request_response_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RentRegistryEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RentRegistryEventsRequest) ProtoMessage() {}

func (x *RentRegistryEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RentRegistryEventsRequest.ProtoReflect.Descriptor instead.
func (*RentRegistryEventsRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{24}
}

func (x *RentRegistryEventsRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

type OnChainEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	EventType     OnChainEventType       `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=OnChainEventType" json:"event_type,omitempty"`
	PageSize      *uint32                `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                 `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                  `protobuf:"varint,5,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnChainEventRequest) Reset() {
	*x = OnChainEventRequest{}
	mi := &file_request_response_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnChainEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnChainEventRequest) ProtoMessage() {}

func (x *OnChainEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnChainEventRequest.ProtoReflect.Descriptor instead.
func (*OnChainEventRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{25}
}

func (x *OnChainEventRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *OnChainEventRequest) GetEventType() OnChainEventType {
	if x != nil {
		return x.EventType
	}
	return OnChainEventType_EVENT_TYPE_NONE
}

func (x *OnChainEventRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *OnChainEventRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *OnChainEventRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type OnChainEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*OnChainEvent        `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextPageToken []byte                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnChainEventResponse) Reset() {
	*x = OnChainEventResponse{}
	mi := &file_request_response_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnChainEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnChainEventResponse) ProtoMessage() {}

func (x *OnChainEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnChainEventResponse.ProtoReflect.Descriptor instead.
func (*OnChainEventResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{26}
}

func (x *OnChainEventResponse) GetEvents() []*OnChainEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *OnChainEventResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type StorageLimitsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limits        []*StorageLimit        `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	Units         uint32                 `protobuf:"varint,2,opt,name=units,proto3" json:"units,omitempty"`
	UnitDetails   []*StorageUnitDetails  `protobuf:"bytes,3,rep,name=unit_details,json=unitDetails,proto3" json:"unit_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageLimitsResponse) Reset() {
	*x = StorageLimitsResponse{}
	mi := &file_request_response_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageLimitsResponse) ProtoMessage() {}

func (x *StorageLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageLimitsResponse.ProtoReflect.Descriptor instead.
func (*StorageLimitsResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{27}
}

func (x *StorageLimitsResponse) GetLimits() []*StorageLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *StorageLimitsResponse) GetUnits() uint32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *StorageLimitsResponse) GetUnitDetails() []*StorageUnitDetails {
	if x != nil {
		return x.UnitDetails
	}
	return nil
}

type StorageUnitDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitType      StorageUnitType        `protobuf:"varint,1,opt,name=unit_type,json=unitType,proto3,enum=StorageUnitType" json:"unit_type,omitempty"`
	UnitSize      uint32                 `protobuf:"varint,2,opt,name=unit_size,json=unitSize,proto3" json:"unit_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageUnitDetails) Reset() {
	*x = StorageUnitDetails{}
	mi := &file_request_response_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageUnitDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageUnitDetails) ProtoMessage() {}

func (x *StorageUnitDetails) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageUnitDetails.ProtoReflect.Descriptor instead.
func (*StorageUnitDetails) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{28}
}

func (x *StorageUnitDetails) GetUnitType() StorageUnitType {
	if x != nil {
		return x.UnitType
	}
	return StorageUnitType_UNIT_TYPE_LEGACY
}

func (x *StorageUnitDetails) GetUnitSize() uint32 {
	if x != nil {
		return x.UnitSize
	}
	return 0
}

type StorageLimit struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	StoreType         StoreType              `protobuf:"varint,1,opt,name=store_type,json=storeType,proto3,enum=StoreType" json:"store_type,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Limit             uint64                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Used              uint64                 `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	EarliestTimestamp uint64                 `protobuf:"varint,5,opt,name=earliestTimestamp,proto3" json:"earliestTimestamp,omitempty"`
	EarliestHash      []byte                 `protobuf:"bytes,6,opt,name=earliestHash,proto3" json:"earliestHash,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StorageLimit) Reset() {
	*x = StorageLimit{}
	mi := &file_request_response_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageLimit) ProtoMessage() {}

func (x *StorageLimit) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageLimit.ProtoReflect.Descriptor instead.
func (*StorageLimit) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{29}
}

func (x *StorageLimit) GetStoreType() StoreType {
	if x != nil {
		return x.StoreType
	}
	return StoreType_STORE_TYPE_NONE
}

func (x *StorageLimit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageLimit) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StorageLimit) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *StorageLimit) GetEarliestTimestamp() uint64 {
	if x != nil {
		return x.EarliestTimestamp
	}
	return 0
}

func (x *StorageLimit) GetEarliestHash() []byte {
	if x != nil {
		return x.EarliestHash
	}
	return nil
}

type UsernameProofRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          []byte                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsernameProofRequest) Reset() {
	*x = UsernameProofRequest{}
	mi := &file_request_response_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernameProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameProofRequest) ProtoMessage() {}

func (x *UsernameProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameProofRequest.ProtoReflect.Descriptor instead.
func (*UsernameProofRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{30}
}

func (x *UsernameProofRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type UsernameProofsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proofs        []*UserNameProof       `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsernameProofsResponse) Reset() {
	*x = UsernameProofsResponse{}
	mi := &file_request_response_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernameProofsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameProofsResponse) ProtoMessage() {}

func (x *UsernameProofsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameProofsResponse.ProtoReflect.Descriptor instead.
func (*UsernameProofsResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{31}
}

func (x *UsernameProofsResponse) GetProofs() []*UserNameProof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type VerificationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Address       []byte                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerificationRequest) Reset() {
	*x = VerificationRequest{}
	mi := &file_request_response_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationRequest) ProtoMessage() {}

func (x *VerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationRequest.ProtoReflect.Descriptor instead.
func (*VerificationRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{32}
}

func (x *VerificationRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *VerificationRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type SignerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Signer        []byte                 `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignerRequest) Reset() {
	*x = SignerRequest{}
	mi := &file_request_response_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignerRequest) ProtoMessage() {}

func (x *SignerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignerRequest.ProtoReflect.Descriptor instead.
func (*SignerRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{33}
}

func (x *SignerRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *SignerRequest) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type LinkRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Fid      uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	LinkType string                 `protobuf:"bytes,2,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	// Types that are valid to be assigned to Target:
	//
	//	*LinkRequest_TargetFid
	Target        isLinkRequest_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkRequest) Reset() {
	*x = LinkRequest{}
	mi := &file_request_response_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRequest) ProtoMessage() {}

func (x *LinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRequest.ProtoReflect.Descriptor instead.
func (*LinkRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{34}
}

func (x *LinkRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *LinkRequest) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *LinkRequest) GetTarget() isLinkRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *LinkRequest) GetTargetFid() uint64 {
	if x != nil {
		if x, ok := x.Target.(*LinkRequest_TargetFid); ok {
			return x.TargetFid
		}
	}
	return 0
}

type isLinkRequest_Target interface {
	isLinkRequest_Target()
}

type LinkRequest_TargetFid struct {
	TargetFid uint64 `protobuf:"varint,3,opt,name=target_fid,json=targetFid,proto3,oneof"`
}

func (*LinkRequest_TargetFid) isLinkRequest_Target() {}

type LinksByFidRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	LinkType      *string                `protobuf:"bytes,2,opt,name=link_type,json=linkType,proto3,oneof" json:"link_type,omitempty"`
	PageSize      *uint32                `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                 `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                  `protobuf:"varint,5,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinksByFidRequest) Reset() {
	*x = LinksByFidRequest{}
	mi := &file_request_response_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinksByFidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinksByFidRequest) ProtoMessage() {}

func (x *LinksByFidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinksByFidRequest.ProtoReflect.Descriptor instead.
func (*LinksByFidRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{35}
}

func (x *LinksByFidRequest) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *LinksByFidRequest) GetLinkType() string {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return ""
}

func (x *LinksByFidRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *LinksByFidRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *LinksByFidRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type LinksByTargetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Target:
	//
	//	*LinksByTargetRequest_TargetFid
	Target        isLinksByTargetRequest_Target `protobuf_oneof:"target"`
	LinkType      *string                       `protobuf:"bytes,2,opt,name=link_type,json=linkType,proto3,oneof" json:"link_type,omitempty"`
	PageSize      *uint32                       `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     []byte                        `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	Reverse       *bool                         `protobuf:"varint,5,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinksByTargetRequest) Reset() {
	*x = LinksByTargetRequest{}
	mi := &file_request_response_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinksByTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinksByTargetRequest) ProtoMessage() {}

func (x *LinksByTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinksByTargetRequest.ProtoReflect.Descriptor instead.
func (*LinksByTargetRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{36}
}

func (x *LinksByTargetRequest) GetTarget() isLinksByTargetRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *LinksByTargetRequest) GetTargetFid() uint64 {
	if x != nil {
		if x, ok := x.Target.(*LinksByTargetRequest_TargetFid); ok {
			return x.TargetFid
		}
	}
	return 0
}

func (x *LinksByTargetRequest) GetLinkType() string {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return ""
}

func (x *LinksByTargetRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *LinksByTargetRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *LinksByTargetRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type isLinksByTargetRequest_Target interface {
	isLinksByTargetRequest_Target()
}

type LinksByTargetRequest_TargetFid struct {
	TargetFid uint64 `protobuf:"varint,1,opt,name=target_fid,json=targetFid,proto3,oneof"`
}

func (*LinksByTargetRequest_TargetFid) isLinksByTargetRequest_Target() {}

type IdRegistryEventByAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdRegistryEventByAddressRequest) Reset() {
	*x = IdRegistryEventByAddressRequest{}
	mi := &file_request_response_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdRegistryEventByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRegistryEventByAddressRequest) ProtoMessage() {}

func (x *IdRegistryEventByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRegistryEventByAddressRequest.ProtoReflect.Descriptor instead.
func (*IdRegistryEventByAddressRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{37}
}

func (x *IdRegistryEventByAddressRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type ContactInfoResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Contacts      []*ContactInfoContentBody `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContactInfoResponse) Reset() {
	*x = ContactInfoResponse{}
	mi := &file_request_response_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfoResponse) ProtoMessage() {}

func (x *ContactInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfoResponse.ProtoReflect.Descriptor instead.
func (*ContactInfoResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{38}
}

func (x *ContactInfoResponse) GetContacts() []*ContactInfoContentBody {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type ValidationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Message       *Message               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationResponse) Reset() {
	*x = ValidationResponse{}
	mi := &file_request_response_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResponse) ProtoMessage() {}

func (x *ValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResponse.ProtoReflect.Descriptor instead.
func (*ValidationResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{39}
}

func (x *ValidationResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidationResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SubmitBulkMessagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*Message             `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitBulkMessagesRequest) Reset() {
	*x = SubmitBulkMessagesRequest{}
	mi := &file_request_response_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBulkMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBulkMessagesRequest) ProtoMessage() {}

func (x *SubmitBulkMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBulkMessagesRequest.ProtoReflect.Descriptor instead.
func (*SubmitBulkMessagesRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{40}
}

func (x *SubmitBulkMessagesRequest) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type MessageError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ErrCode       string                 `protobuf:"bytes,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageError) Reset() {
	*x = MessageError{}
	mi := &file_request_response_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageError) ProtoMessage() {}

func (x *MessageError) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageError.ProtoReflect.Descriptor instead.
func (*MessageError) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{41}
}

func (x *MessageError) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MessageError) GetErrCode() string {
	if x != nil {
		return x.ErrCode
	}
	return ""
}

func (x *MessageError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BulkMessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*BulkMessageResponse_Message
	//	*BulkMessageResponse_MessageError
	Response      isBulkMessageResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkMessageResponse) Reset() {
	*x = BulkMessageResponse{}
	mi := &file_request_response_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMessageResponse) ProtoMessage() {}

func (x *BulkMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMessageResponse.ProtoReflect.Descriptor instead.
func (*BulkMessageResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{42}
}

func (x *BulkMessageResponse) GetResponse() isBulkMessageResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BulkMessageResponse) GetMessage() *Message {
	if x != nil {
		if x, ok := x.Response.(*BulkMessageResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *BulkMessageResponse) GetMessageError() *MessageError {
	if x != nil {
		if x, ok := x.Response.(*BulkMessageResponse_MessageError); ok {
			return x.MessageError
		}
	}
	return nil
}

type isBulkMessageResponse_Response interface {
	isBulkMessageResponse_Response()
}

type BulkMessageResponse_Message struct {
	Message *Message `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type BulkMessageResponse_MessageError struct {
	MessageError *MessageError `protobuf:"bytes,2,opt,name=message_error,json=messageError,proto3,oneof"`
}

func (*BulkMessageResponse_Message) isBulkMessageResponse_Response() {}

func (*BulkMessageResponse_MessageError) isBulkMessageResponse_Response() {}

type SubmitBulkMessagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*BulkMessageResponse `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitBulkMessagesResponse) Reset() {
	*x = SubmitBulkMessagesResponse{}
	mi := &file_request_response_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBulkMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBulkMessagesResponse) ProtoMessage() {}

func (x *SubmitBulkMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBulkMessagesResponse.ProtoReflect.Descriptor instead.
func (*SubmitBulkMessagesResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{43}
}

func (x *SubmitBulkMessagesResponse) GetMessages() []*BulkMessageResponse {
	if x != nil {
		return x.Messages
	}
	return nil
}

type StreamSyncRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*StreamSyncRequest_GetInfo
	//	*StreamSyncRequest_GetCurrentPeers
	//	*StreamSyncRequest_StopSync
	//	*StreamSyncRequest_ForceSync
	//	*StreamSyncRequest_GetSyncStatus
	//	*StreamSyncRequest_GetAllSyncIdsByPrefix
	//	*StreamSyncRequest_GetAllMessagesBySyncIds
	//	*StreamSyncRequest_GetSyncMetadataByPrefix
	//	*StreamSyncRequest_GetSyncSnapshotByPrefix
	//	*StreamSyncRequest_GetOnChainEvents
	//	*StreamSyncRequest_GetOnChainSignersByFid
	Request       isStreamSyncRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSyncRequest) Reset() {
	*x = StreamSyncRequest{}
	mi := &file_request_response_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSyncRequest) ProtoMessage() {}

func (x *StreamSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSyncRequest.ProtoReflect.Descriptor instead.
func (*StreamSyncRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{44}
}

func (x *StreamSyncRequest) GetRequest() isStreamSyncRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *StreamSyncRequest) GetGetInfo() *HubInfoRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetInfo); ok {
			return x.GetInfo
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetCurrentPeers() *Empty {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetCurrentPeers); ok {
			return x.GetCurrentPeers
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetStopSync() *Empty {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_StopSync); ok {
			return x.StopSync
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetForceSync() *SyncStatusRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_ForceSync); ok {
			return x.ForceSync
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetSyncStatus() *SyncStatusRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetSyncStatus); ok {
			return x.GetSyncStatus
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetAllSyncIdsByPrefix() *TrieNodePrefix {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetAllSyncIdsByPrefix); ok {
			return x.GetAllSyncIdsByPrefix
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetAllMessagesBySyncIds() *SyncIds {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetAllMessagesBySyncIds); ok {
			return x.GetAllMessagesBySyncIds
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetSyncMetadataByPrefix() *TrieNodePrefix {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetSyncMetadataByPrefix); ok {
			return x.GetSyncMetadataByPrefix
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetSyncSnapshotByPrefix() *TrieNodePrefix {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetSyncSnapshotByPrefix); ok {
			return x.GetSyncSnapshotByPrefix
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetOnChainEvents() *OnChainEventRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetOnChainEvents); ok {
			return x.GetOnChainEvents
		}
	}
	return nil
}

func (x *StreamSyncRequest) GetGetOnChainSignersByFid() *FidRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamSyncRequest_GetOnChainSignersByFid); ok {
			return x.GetOnChainSignersByFid
		}
	}
	return nil
}

type isStreamSyncRequest_Request interface {
	isStreamSyncRequest_Request()
}

type StreamSyncRequest_GetInfo struct {
	GetInfo *HubInfoRequest `protobuf:"bytes,1,opt,name=get_info,json=getInfo,proto3,oneof"`
}

type StreamSyncRequest_GetCurrentPeers struct {
	GetCurrentPeers *Empty `protobuf:"bytes,2,opt,name=get_current_peers,json=getCurrentPeers,proto3,oneof"`
}

type StreamSyncRequest_StopSync struct {
	StopSync *Empty `protobuf:"bytes,3,opt,name=stop_sync,json=stopSync,proto3,oneof"`
}

type StreamSyncRequest_ForceSync struct {
	ForceSync *SyncStatusRequest `protobuf:"bytes,4,opt,name=force_sync,json=forceSync,proto3,oneof"`
}

type StreamSyncRequest_GetSyncStatus struct {
	GetSyncStatus *SyncStatusRequest `protobuf:"bytes,5,opt,name=get_sync_status,json=getSyncStatus,proto3,oneof"`
}

type StreamSyncRequest_GetAllSyncIdsByPrefix struct {
	GetAllSyncIdsByPrefix *TrieNodePrefix `protobuf:"bytes,6,opt,name=get_all_sync_ids_by_prefix,json=getAllSyncIdsByPrefix,proto3,oneof"`
}

type StreamSyncRequest_GetAllMessagesBySyncIds struct {
	GetAllMessagesBySyncIds *SyncIds `protobuf:"bytes,7,opt,name=get_all_messages_by_sync_ids,json=getAllMessagesBySyncIds,proto3,oneof"`
}

type StreamSyncRequest_GetSyncMetadataByPrefix struct {
	GetSyncMetadataByPrefix *TrieNodePrefix `protobuf:"bytes,8,opt,name=get_sync_metadata_by_prefix,json=getSyncMetadataByPrefix,proto3,oneof"`
}

type StreamSyncRequest_GetSyncSnapshotByPrefix struct {
	GetSyncSnapshotByPrefix *TrieNodePrefix `protobuf:"bytes,9,opt,name=get_sync_snapshot_by_prefix,json=getSyncSnapshotByPrefix,proto3,oneof"`
}

type StreamSyncRequest_GetOnChainEvents struct {
	GetOnChainEvents *OnChainEventRequest `protobuf:"bytes,10,opt,name=get_on_chain_events,json=getOnChainEvents,proto3,oneof"`
}

type StreamSyncRequest_GetOnChainSignersByFid struct {
	GetOnChainSignersByFid *FidRequest `protobuf:"bytes,11,opt,name=get_on_chain_signers_by_fid,json=getOnChainSignersByFid,proto3,oneof"`
}

func (*StreamSyncRequest_GetInfo) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetCurrentPeers) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_StopSync) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_ForceSync) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetSyncStatus) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetAllSyncIdsByPrefix) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetAllMessagesBySyncIds) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetSyncMetadataByPrefix) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetSyncSnapshotByPrefix) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetOnChainEvents) isStreamSyncRequest_Request() {}

func (*StreamSyncRequest_GetOnChainSignersByFid) isStreamSyncRequest_Request() {}

type StreamError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrCode       string                 `protobuf:"bytes,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Request       string                 `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamError) Reset() {
	*x = StreamError{}
	mi := &file_request_response_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamError) ProtoMessage() {}

func (x *StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamError.ProtoReflect.Descriptor instead.
func (*StreamError) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{45}
}

func (x *StreamError) GetErrCode() string {
	if x != nil {
		return x.ErrCode
	}
	return ""
}

func (x *StreamError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StreamError) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type StreamSyncResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*StreamSyncResponse_GetInfo
	//	*StreamSyncResponse_GetCurrentPeers
	//	*StreamSyncResponse_StopSync
	//	*StreamSyncResponse_ForceSync
	//	*StreamSyncResponse_GetSyncStatus
	//	*StreamSyncResponse_GetAllSyncIdsByPrefix
	//	*StreamSyncResponse_GetAllMessagesBySyncIds
	//	*StreamSyncResponse_GetSyncMetadataByPrefix
	//	*StreamSyncResponse_GetSyncSnapshotByPrefix
	//	*StreamSyncResponse_GetOnChainEvents
	//	*StreamSyncResponse_GetOnChainSignersByFid
	//	*StreamSyncResponse_Error
	Response      isStreamSyncResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSyncResponse) Reset() {
	*x = StreamSyncResponse{}
	mi := &file_request_response_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSyncResponse) ProtoMessage() {}

func (x *StreamSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSyncResponse.ProtoReflect.Descriptor instead.
func (*StreamSyncResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{46}
}

func (x *StreamSyncResponse) GetResponse() isStreamSyncResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StreamSyncResponse) GetGetInfo() *HubInfoResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetInfo); ok {
			return x.GetInfo
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetCurrentPeers() *ContactInfoResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetCurrentPeers); ok {
			return x.GetCurrentPeers
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetStopSync() *SyncStatusResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_StopSync); ok {
			return x.StopSync
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetForceSync() *SyncStatusResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_ForceSync); ok {
			return x.ForceSync
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetSyncStatus() *SyncStatusResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetSyncStatus); ok {
			return x.GetSyncStatus
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetAllSyncIdsByPrefix() *SyncIds {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetAllSyncIdsByPrefix); ok {
			return x.GetAllSyncIdsByPrefix
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetAllMessagesBySyncIds() *MessagesResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetAllMessagesBySyncIds); ok {
			return x.GetAllMessagesBySyncIds
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetSyncMetadataByPrefix() *TrieNodeMetadataResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetSyncMetadataByPrefix); ok {
			return x.GetSyncMetadataByPrefix
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetSyncSnapshotByPrefix() *TrieNodeSnapshotResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetSyncSnapshotByPrefix); ok {
			return x.GetSyncSnapshotByPrefix
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetOnChainEvents() *OnChainEventResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetOnChainEvents); ok {
			return x.GetOnChainEvents
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetGetOnChainSignersByFid() *OnChainEventResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_GetOnChainSignersByFid); ok {
			return x.GetOnChainSignersByFid
		}
	}
	return nil
}

func (x *StreamSyncResponse) GetError() *StreamError {
	if x != nil {
		if x, ok := x.Response.(*StreamSyncResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isStreamSyncResponse_Response interface {
	isStreamSyncResponse_Response()
}

type StreamSyncResponse_GetInfo struct {
	GetInfo *HubInfoResponse `protobuf:"bytes,1,opt,name=get_info,json=getInfo,proto3,oneof"`
}

type StreamSyncResponse_GetCurrentPeers struct {
	GetCurrentPeers *ContactInfoResponse `protobuf:"bytes,2,opt,name=get_current_peers,json=getCurrentPeers,proto3,oneof"`
}

type StreamSyncResponse_StopSync struct {
	StopSync *SyncStatusResponse `protobuf:"bytes,3,opt,name=stop_sync,json=stopSync,proto3,oneof"`
}

type StreamSyncResponse_ForceSync struct {
	ForceSync *SyncStatusResponse `protobuf:"bytes,4,opt,name=force_sync,json=forceSync,proto3,oneof"`
}

type StreamSyncResponse_GetSyncStatus struct {
	GetSyncStatus *SyncStatusResponse `protobuf:"bytes,5,opt,name=get_sync_status,json=getSyncStatus,proto3,oneof"`
}

type StreamSyncResponse_GetAllSyncIdsByPrefix struct {
	GetAllSyncIdsByPrefix *SyncIds `protobuf:"bytes,6,opt,name=get_all_sync_ids_by_prefix,json=getAllSyncIdsByPrefix,proto3,oneof"`
}

type StreamSyncResponse_GetAllMessagesBySyncIds struct {
	GetAllMessagesBySyncIds *MessagesResponse `protobuf:"bytes,7,opt,name=get_all_messages_by_sync_ids,json=getAllMessagesBySyncIds,proto3,oneof"`
}

type StreamSyncResponse_GetSyncMetadataByPrefix struct {
	GetSyncMetadataByPrefix *TrieNodeMetadataResponse `protobuf:"bytes,8,opt,name=get_sync_metadata_by_prefix,json=getSyncMetadataByPrefix,proto3,oneof"`
}

type StreamSyncResponse_GetSyncSnapshotByPrefix struct {
	GetSyncSnapshotByPrefix *TrieNodeSnapshotResponse `protobuf:"bytes,9,opt,name=get_sync_snapshot_by_prefix,json=getSyncSnapshotByPrefix,proto3,oneof"`
}

type StreamSyncResponse_GetOnChainEvents struct {
	GetOnChainEvents *OnChainEventResponse `protobuf:"bytes,10,opt,name=get_on_chain_events,json=getOnChainEvents,proto3,oneof"`
}

type StreamSyncResponse_GetOnChainSignersByFid struct {
	GetOnChainSignersByFid *OnChainEventResponse `protobuf:"bytes,11,opt,name=get_on_chain_signers_by_fid,json=getOnChainSignersByFid,proto3,oneof"`
}

type StreamSyncResponse_Error struct {
	Error *StreamError `protobuf:"bytes,12,opt,name=error,proto3,oneof"`
}

func (*StreamSyncResponse_GetInfo) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetCurrentPeers) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_StopSync) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_ForceSync) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetSyncStatus) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetAllSyncIdsByPrefix) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetAllMessagesBySyncIds) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetSyncMetadataByPrefix) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetSyncSnapshotByPrefix) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetOnChainEvents) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_GetOnChainSignersByFid) isStreamSyncResponse_Response() {}

func (*StreamSyncResponse_Error) isStreamSyncResponse_Response() {}

type StreamFetchRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IdempotencyKey string                 `protobuf:"bytes,1,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	// Types that are valid to be assigned to Request:
	//
	//	*StreamFetchRequest_CastMessagesByFid
	//	*StreamFetchRequest_ReactionMessagesByFid
	//	*StreamFetchRequest_VerificationMessagesByFid
	//	*StreamFetchRequest_UserDataMessagesByFid
	//	*StreamFetchRequest_LinkMessagesByFid
	Request       isStreamFetchRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamFetchRequest) Reset() {
	*x = StreamFetchRequest{}
	mi := &file_request_response_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFetchRequest) ProtoMessage() {}

func (x *StreamFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFetchRequest.ProtoReflect.Descriptor instead.
func (*StreamFetchRequest) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{47}
}

func (x *StreamFetchRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *StreamFetchRequest) GetRequest() isStreamFetchRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *StreamFetchRequest) GetCastMessagesByFid() *FidTimestampRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamFetchRequest_CastMessagesByFid); ok {
			return x.CastMessagesByFid
		}
	}
	return nil
}

func (x *StreamFetchRequest) GetReactionMessagesByFid() *FidTimestampRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamFetchRequest_ReactionMessagesByFid); ok {
			return x.ReactionMessagesByFid
		}
	}
	return nil
}

func (x *StreamFetchRequest) GetVerificationMessagesByFid() *FidTimestampRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamFetchRequest_VerificationMessagesByFid); ok {
			return x.VerificationMessagesByFid
		}
	}
	return nil
}

func (x *StreamFetchRequest) GetUserDataMessagesByFid() *FidTimestampRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamFetchRequest_UserDataMessagesByFid); ok {
			return x.UserDataMessagesByFid
		}
	}
	return nil
}

func (x *StreamFetchRequest) GetLinkMessagesByFid() *FidTimestampRequest {
	if x != nil {
		if x, ok := x.Request.(*StreamFetchRequest_LinkMessagesByFid); ok {
			return x.LinkMessagesByFid
		}
	}
	return nil
}

type isStreamFetchRequest_Request interface {
	isStreamFetchRequest_Request()
}

type StreamFetchRequest_CastMessagesByFid struct {
	CastMessagesByFid *FidTimestampRequest `protobuf:"bytes,2,opt,name=cast_messages_by_fid,json=castMessagesByFid,proto3,oneof"`
}

type StreamFetchRequest_ReactionMessagesByFid struct {
	ReactionMessagesByFid *FidTimestampRequest `protobuf:"bytes,3,opt,name=reaction_messages_by_fid,json=reactionMessagesByFid,proto3,oneof"`
}

type StreamFetchRequest_VerificationMessagesByFid struct {
	VerificationMessagesByFid *FidTimestampRequest `protobuf:"bytes,4,opt,name=verification_messages_by_fid,json=verificationMessagesByFid,proto3,oneof"`
}

type StreamFetchRequest_UserDataMessagesByFid struct {
	UserDataMessagesByFid *FidTimestampRequest `protobuf:"bytes,5,opt,name=user_data_messages_by_fid,json=userDataMessagesByFid,proto3,oneof"`
}

type StreamFetchRequest_LinkMessagesByFid struct {
	LinkMessagesByFid *FidTimestampRequest `protobuf:"bytes,6,opt,name=link_messages_by_fid,json=linkMessagesByFid,proto3,oneof"`
}

func (*StreamFetchRequest_CastMessagesByFid) isStreamFetchRequest_Request() {}

func (*StreamFetchRequest_ReactionMessagesByFid) isStreamFetchRequest_Request() {}

func (*StreamFetchRequest_VerificationMessagesByFid) isStreamFetchRequest_Request() {}

func (*StreamFetchRequest_UserDataMessagesByFid) isStreamFetchRequest_Request() {}

func (*StreamFetchRequest_LinkMessagesByFid) isStreamFetchRequest_Request() {}

type StreamFetchResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IdempotencyKey string                 `protobuf:"bytes,1,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*StreamFetchResponse_Messages
	//	*StreamFetchResponse_Error
	Response      isStreamFetchResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamFetchResponse) Reset() {
	*x = StreamFetchResponse{}
	mi := &file_request_response_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFetchResponse) ProtoMessage() {}

func (x *StreamFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_request_response_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFetchResponse.ProtoReflect.Descriptor instead.
func (*StreamFetchResponse) Descriptor() ([]byte, []int) {
	return file_request_response_proto_rawDescGZIP(), []int{48}
}

func (x *StreamFetchResponse) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *StreamFetchResponse) GetResponse() isStreamFetchResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StreamFetchResponse) GetMessages() *MessagesResponse {
	if x != nil {
		if x, ok := x.Response.(*StreamFetchResponse_Messages); ok {
			return x.Messages
		}
	}
	return nil
}

func (x *StreamFetchResponse) GetError() *StreamError {
	if x != nil {
		if x, ok := x.Response.(*StreamFetchResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isStreamFetchResponse_Response interface {
	isStreamFetchResponse_Response()
}

type StreamFetchResponse_Messages struct {
	Messages *MessagesResponse `protobuf:"bytes,2,opt,name=messages,proto3,oneof"`
}

type StreamFetchResponse_Error struct {
	Error *StreamError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*StreamFetchResponse_Messages) isStreamFetchResponse_Response() {}

func (*StreamFetchResponse_Error) isStreamFetchResponse_Response() {}

var File_request_response_proto protoreflect.FileDescriptor

var file_request_response_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68, 0x75,
	0x62, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x48, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x1e, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0e, 0x48, 0x75, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x62,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x48, 0x75, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x08, 0x64,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x44, 0x62, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x64, 0x62, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x75, 0x62, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x68, 0x75, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x44, 0x62, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x46, 0x69,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x46, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x88, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x79,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0a, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x67, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x69, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x65,
	0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x74, 0x68, 0x65, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x64, 0x53, 0x79, 0x6e, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x64, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x54, 0x72,
	0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x9b, 0x01, 0x0a,
	0x18, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x28, 0x0a, 0x0e, 0x54, 0x72,
	0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x24, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x46,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x13, 0x46, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x66, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x22, 0x63, 0x0a, 0x0c, 0x46, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04,
	0x66, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x80, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x15, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0xcf,
	0x02, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a,
	0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x22, 0x58, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x13, 0x4f, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x66, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x14, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x61, 0x72, 0x6c, 0x69,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x2a, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x16,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x41,
	0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x0b,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x3b, 0x0a,
	0x1f, 0x49, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x7d, 0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4e, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0xea, 0x05, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x75, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3c, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x69, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x49, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49,
	0x64, 0x73, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a,
	0x1b, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4f,
	0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x45, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x4f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd1, 0x06, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x48, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x42, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3d,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x67, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x1a, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x73, 0x48, 0x00, 0x52, 0x15, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x73, 0x42, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x52, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x17, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x59, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x72, 0x69, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x46,
	0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4f, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4f, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6,
	0x03, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x47,
	0x0a, 0x14, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x1c, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x46, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x64, 0x12, 0x50, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xbe, 0x01, 0x0a, 0x09,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53,
	0x54, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x53, 0x10, 0x06, 0x2a, 0x3b, 0x0a, 0x0f,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x47,
	0x41, 0x43, 0x59, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x32, 0x30, 0x32, 0x34, 0x10, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x72, 0x79, 0x70, 0x61, 0x6e, 0x2f, 0x6c,
	0x65, 0x6d, 0x6f, 0x6e, 0x33, 0x2f, 0x66, 0x61, 0x72, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_request_response_proto_rawDescOnce sync.Once
	file_request_response_proto_rawDescData []byte
)

func file_request_response_proto_rawDescGZIP() []byte {
	file_request_response_proto_rawDescOnce.Do(func() {
		file_request_response_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_request_response_proto_rawDesc), len(file_request_response_proto_rawDesc)))
	})
	return file_request_response_proto_rawDescData
}

var file_request_response_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_request_response_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_request_response_proto_goTypes = []any{
	(StoreType)(0),                          // 0: StoreType
	(StorageUnitType)(0),                    // 1: StorageUnitType
	(*Empty)(nil),                           // 2: Empty
	(*SubscribeRequest)(nil),                // 3: SubscribeRequest
	(*EventRequest)(nil),                    // 4: EventRequest
	(*HubInfoRequest)(nil),                  // 5: HubInfoRequest
	(*HubInfoResponse)(nil),                 // 6: HubInfoResponse
	(*DbStats)(nil),                         // 7: DbStats
	(*SyncStatusRequest)(nil),               // 8: SyncStatusRequest
	(*SyncStatusResponse)(nil),              // 9: SyncStatusResponse
	(*SyncStatus)(nil),                      // 10: SyncStatus
	(*TrieNodeMetadataResponse)(nil),        // 11: TrieNodeMetadataResponse
	(*TrieNodeSnapshotResponse)(nil),        // 12: TrieNodeSnapshotResponse
	(*TrieNodePrefix)(nil),                  // 13: TrieNodePrefix
	(*SyncIds)(nil),                         // 14: SyncIds
	(*FidRequest)(nil),                      // 15: FidRequest
	(*FidTimestampRequest)(nil),             // 16: FidTimestampRequest
	(*FidsRequest)(nil),                     // 17: FidsRequest
	(*FidsResponse)(nil),                    // 18: FidsResponse
	(*MessagesResponse)(nil),                // 19: MessagesResponse
	(*CastsByParentRequest)(nil),            // 20: CastsByParentRequest
	(*ReactionRequest)(nil),                 // 21: ReactionRequest
	(*ReactionsByFidRequest)(nil),           // 22: ReactionsByFidRequest
	(*ReactionsByTargetRequest)(nil),        // 23: ReactionsByTargetRequest
	(*UserDataRequest)(nil),                 // 24: UserDataRequest
	(*NameRegistryEventRequest)(nil),        // 25: NameRegistryEventRequest
	(*RentRegistryEventsRequest)(nil),       // 26: RentRegistryEventsRequest
	(*OnChainEventRequest)(nil),             // 27: OnChainEventRequest
	(*OnChainEventResponse)(nil),            // 28: OnChainEventResponse
	(*StorageLimitsResponse)(nil),           // 29: StorageLimitsResponse
	(*StorageUnitDetails)(nil),              // 30: StorageUnitDetails
	(*StorageLimit)(nil),                    // 31: StorageLimit
	(*UsernameProofRequest)(nil),            // 32: UsernameProofRequest
	(*UsernameProofsResponse)(nil),          // 33: UsernameProofsResponse
	(*VerificationRequest)(nil),             // 34: VerificationRequest
	(*SignerRequest)(nil),                   // 35: SignerRequest
	(*LinkRequest)(nil),                     // 36: LinkRequest
	(*LinksByFidRequest)(nil),               // 37: LinksByFidRequest
	(*LinksByTargetRequest)(nil),            // 38: LinksByTargetRequest
	(*IdRegistryEventByAddressRequest)(nil), // 39: IdRegistryEventByAddressRequest
	(*ContactInfoResponse)(nil),             // 40: ContactInfoResponse
	(*ValidationResponse)(nil),              // 41: ValidationResponse
	(*SubmitBulkMessagesRequest)(nil),       // 42: SubmitBulkMessagesRequest
	(*MessageError)(nil),                    // 43: MessageError
	(*BulkMessageResponse)(nil),             // 44: BulkMessageResponse
	(*SubmitBulkMessagesResponse)(nil),      // 45: SubmitBulkMessagesResponse
	(*StreamSyncRequest)(nil),               // 46: StreamSyncRequest
	(*StreamError)(nil),                     // 47: StreamError
	(*StreamSyncResponse)(nil),              // 48: StreamSyncResponse
	(*StreamFetchRequest)(nil),              // 49: StreamFetchRequest
	(*StreamFetchResponse)(nil),             // 50: StreamFetchResponse
	(HubEventType)(0),                       // 51: HubEventType
	(*Message)(nil),                         // 52: Message
	(*CastId)(nil),                          // 53: CastId
	(ReactionType)(0),                       // 54: ReactionType
	(UserDataType)(0),                       // 55: UserDataType
	(OnChainEventType)(0),                   // 56: OnChainEventType
	(*OnChainEvent)(nil),                    // 57: OnChainEvent
	(*UserNameProof)(nil),                   // 58: UserNameProof
	(*ContactInfoContentBody)(nil),          // 59: ContactInfoContentBody
}
var file_request_response_proto_depIdxs = []int32{
	51, // 0: SubscribeRequest.event_types:type_name -> HubEventType
	7,  // 1: HubInfoResponse.db_stats:type_name -> DbStats
	10, // 2: SyncStatusResponse.sync_status:type_name -> SyncStatus
	11, // 3: TrieNodeMetadataResponse.children:type_name -> TrieNodeMetadataResponse
	52, // 4: MessagesResponse.messages:type_name -> Message
	53, // 5: CastsByParentRequest.parent_cast_id:type_name -> CastId
	54, // 6: ReactionRequest.reaction_type:type_name -> ReactionType
	53, // 7: ReactionRequest.target_cast_id:type_name -> CastId
	54, // 8: ReactionsByFidRequest.reaction_type:type_name -> ReactionType
	53, // 9: ReactionsByTargetRequest.target_cast_id:type_name -> CastId
	54, // 10: ReactionsByTargetRequest.reaction_type:type_name -> ReactionType
	55, // 11: UserDataRequest.user_data_type:type_name -> UserDataType
	56, // 12: OnChainEventRequest.event_type:type_name -> OnChainEventType
	57, // 13: OnChainEventResponse.events:type_name -> OnChainEvent
	31, // 14: StorageLimitsResponse.limits:type_name -> StorageLimit
	30, // 15: StorageLimitsResponse.unit_details:type_name -> StorageUnitDetails
	1,  // 16: StorageUnitDetails.unit_type:type_name -> StorageUnitType
	0,  // 17: StorageLimit.store_type:type_name -> StoreType
	58, // 18: UsernameProofsResponse.proofs:type_name -> UserNameProof
	59, // 19: ContactInfoResponse.contacts:type_name -> ContactInfoContentBody
	52, // 20: ValidationResponse.message:type_name -> Message
	52, // 21: SubmitBulkMessagesRequest.messages:type_name -> Message
	52, // 22: BulkMessageResponse.message:type_name -> Message
	43, // 23: BulkMessageResponse.message_error:type_name -> MessageError
	44, // 24: SubmitBulkMessagesResponse.messages:type_name -> BulkMessageResponse
	5,  // 25: StreamSyncRequest.get_info:type_name -> HubInfoRequest
	2,  // 26: StreamSyncRequest.get_current_peers:type_name -> Empty
	2,  // 27: StreamSyncRequest.stop_sync:type_name -> Empty
	8,  // 28: StreamSyncRequest.force_sync:type_name -> SyncStatusRequest
	8,  // 29: StreamSyncRequest.get_sync_status:type_name -> SyncStatusRequest
	13, // 30: StreamSyncRequest.get_all_sync_ids_by_prefix:type_name -> TrieNodePrefix
	14, // 31: StreamSyncRequest.get_all_messages_by_sync_ids:type_name -> SyncIds
	13, // 32: StreamSyncRequest.get_sync_metadata_by_prefix:type_name -> TrieNodePrefix
	13, // 33: StreamSyncRequest.get_sync_snapshot_by_prefix:type_name -> TrieNodePrefix
	27, // 34: StreamSyncRequest.get_on_chain_events:type_name -> OnChainEventRequest
	15, // 35: StreamSyncRequest.get_on_chain_signers_by_fid:type_name -> FidRequest
	6,  // 36: StreamSyncResponse.get_info:type_name -> HubInfoResponse
	40, // 37: StreamSyncResponse.get_current_peers:type_name -> ContactInfoResponse
	9,  // 38: StreamSyncResponse.stop_sync:type_name -> SyncStatusResponse
	9,  // 39: StreamSyncResponse.force_sync:type_name -> SyncStatusResponse
	9,  // 40: StreamSyncResponse.get_sync_status:type_name -> SyncStatusResponse
	14, // 41: StreamSyncResponse.get_all_sync_ids_by_prefix:type_name -> SyncIds
	19, // 42: StreamSyncResponse.get_all_messages_by_sync_ids:type_name -> MessagesResponse
	11, // 43: StreamSyncResponse.get_sync_metadata_by_prefix:type_name -> TrieNodeMetadataResponse
	12, // 44: StreamSyncResponse.get_sync_snapshot_by_prefix:type_name -> TrieNodeSnapshotResponse
	28, // 45: StreamSyncResponse.get_on_chain_events:type_name -> OnChainEventResponse
	28, // 46: StreamSyncResponse.get_on_chain_signers_by_fid:type_name -> OnChainEventResponse
	47, // 47: StreamSyncResponse.error:type_name -> StreamError
	16, // 48: StreamFetchRequest.cast_messages_by_fid:type_name -> FidTimestampRequest
	16, // 49: StreamFetchRequest.reaction_messages_by_fid:type_name -> FidTimestampRequest
	16, // 50: StreamFetchRequest.verification_messages_by_fid:type_name -> FidTimestampRequest
	16, // 51: StreamFetchRequest.user_data_messages_by_fid:type_name -> FidTimestampRequest
	16, // 52: StreamFetchRequest.link_messages_by_fid:type_name -> FidTimestampRequest
	19, // 53: StreamFetchResponse.messages:type_name -> MessagesResponse
	47, // 54: StreamFetchResponse.error:type_name -> StreamError
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_request_response_proto_init() }
func file_request_response_proto_init() {
	if File_request_response_proto != nil {
		return
	}
	file_message_proto_init()
	file_onchain_event_proto_init()
	file_hub_event_proto_init()
	file_username_proof_proto_init()
	file_gossip_proto_init()
	file_request_response_proto_msgTypes[1].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[6].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[13].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[14].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[15].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[16].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[17].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[18].OneofWrappers = []any{
		(*CastsByParentRequest_ParentCastId)(nil),
		(*CastsByParentRequest_ParentUrl)(nil),
	}
	file_request_response_proto_msgTypes[19].OneofWrappers = []any{
		(*ReactionRequest_TargetCastId)(nil),
		(*ReactionRequest_TargetUrl)(nil),
	}
	file_request_response_proto_msgTypes[20].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[21].OneofWrappers = []any{
		(*ReactionsByTargetRequest_TargetCastId)(nil),
		(*ReactionsByTargetRequest_TargetUrl)(nil),
	}
	file_request_response_proto_msgTypes[25].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[26].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[34].OneofWrappers = []any{
		(*LinkRequest_TargetFid)(nil),
	}
	file_request_response_proto_msgTypes[35].OneofWrappers = []any{}
	file_request_response_proto_msgTypes[36].OneofWrappers = []any{
		(*LinksByTargetRequest_TargetFid)(nil),
	}
	file_request_response_proto_msgTypes[42].OneofWrappers = []any{
		(*BulkMessageResponse_Message)(nil),
		(*BulkMessageResponse_MessageError)(nil),
	}
	file_request_response_proto_msgTypes[44].OneofWrappers = []any{
		(*StreamSyncRequest_GetInfo)(nil),
		(*StreamSyncRequest_GetCurrentPeers)(nil),
		(*StreamSyncRequest_StopSync)(nil),
		(*StreamSyncRequest_ForceSync)(nil),
		(*StreamSyncRequest_GetSyncStatus)(nil),
		(*StreamSyncRequest_GetAllSyncIdsByPrefix)(nil),
		(*StreamSyncRequest_GetAllMessagesBySyncIds)(nil),
		(*StreamSyncRequest_GetSyncMetadataByPrefix)(nil),
		(*StreamSyncRequest_GetSyncSnapshotByPrefix)(nil),
		(*StreamSyncRequest_GetOnChainEvents)(nil),
		(*StreamSyncRequest_GetOnChainSignersByFid)(nil),
	}
	file_request_response_proto_msgTypes[46].OneofWrappers = []any{
		(*StreamSyncResponse_GetInfo)(nil),
		(*StreamSyncResponse_GetCurrentPeers)(nil),
		(*StreamSyncResponse_StopSync)(nil),
		(*StreamSyncResponse_ForceSync)(nil),
		(*StreamSyncResponse_GetSyncStatus)(nil),
		(*StreamSyncResponse_GetAllSyncIdsByPrefix)(nil),
		(*StreamSyncResponse_GetAllMessagesBySyncIds)(nil),
		(*StreamSyncResponse_GetSyncMetadataByPrefix)(nil),
		(*StreamSyncResponse_GetSyncSnapshotByPrefix)(nil),
		(*StreamSyncResponse_GetOnChainEvents)(nil),
		(*StreamSyncResponse_GetOnChainSignersByFid)(nil),
		(*StreamSyncResponse_Error)(nil),
	}
	file_request_response_proto_msgTypes[47].OneofWrappers = []any{
		(*StreamFetchRequest_CastMessagesByFid)(nil),
		(*StreamFetchRequest_ReactionMessagesByFid)(nil),
		(*StreamFetchRequest_VerificationMessagesByFid)(nil),
		(*StreamFetchRequest_UserDataMessagesByFid)(nil),
		(*StreamFetchRequest_LinkMessagesByFid)(nil),
	}
	file_request_response_proto_msgTypes[48].OneofWrappers = []any{
		(*StreamFetchResponse_Messages)(nil),
		(*StreamFetchResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_request_response_proto_rawDesc), len(file_request_response_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_request_response_proto_goTypes,
		DependencyIndexes: file_request_response_proto_depIdxs,
		EnumInfos:         file_request_response_proto_enumTypes,
		MessageInfos:      file_request_response_proto_msgTypes,
	}.Build()
	File_request_response_proto = out.File
	file_request_response_proto_goTypes = nil
	file_request_response_proto_depIdxs = nil
}
